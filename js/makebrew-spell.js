"use strict";class SpellBuilder extends Builder{constructor(){super({titleSidebarLoadExisting:"Load Existing Spell",titleSidebarDownloadJson:"Download Spells as JSON",prop:"spell",titleSelectDefaultSource:"(Same as Spell)"}),this._subclassLookup={},this._renderOutputDebounced=MiscUtil.debounce(()=>this._renderOutput(),50)}handleSidebarLoadExistingClick(){const a=new SearchWidget({Spell:SearchWidget.CONTENT_INDICES.Spell},async(a,b,d)=>{c();const e=MiscUtil.copy((await Renderer.hover.pCacheAndGet(a,b,d)));e.source=this._ui.source,this.setStateFromLoaded({s:e,m:this.getInitialMetaState()}),this.renderInput(),this.renderOutput()},{defaultCategory:"Spell"}),{$modalInner:b,doClose:c}=UiUtil.getShowModal({title:"Select Spell",cbClose:()=>a.$wrpSearch.detach()});b.append(a.$wrpSearch),a.doFocus()}async pInit(){this._subclassLookup=await RenderSpells.pGetSubclassLookup()}_getInitialState(){return{name:"New Spell",level:1,school:"A",time:[{number:1,unit:"action"}],range:{type:"point",distance:{type:"self"}},duration:[{type:"instant"}],classes:{fromClassList:[{name:"Wizard",source:SRC_PHB}]},entries:[],source:this._ui?this._ui.source:""}}setStateFromLoaded(a){a&&a.s&&a.m&&(this.__state=a.s,this.__meta=a.m)}doHandleSourcesAdd(){this._doHandleSourcesAdd_handleSelProp("$selClassSources"),this._doHandleSourcesAdd_handleSelProp("$selSubclassSources")}_doHandleSourcesAdd_handleSelProp(a){(this._$eles[a]||[]).map(a=>{const b=a.val();return a.empty(),[...Object.keys(Parser.SOURCE_JSON_TO_FULL),...this._ui.allSources].forEach(b=>a.append(`<option value="${b.escapeQuotes()}">${Parser.sourceJsonToFull(b).escapeQuotes()}</option>`)),this._ui.allSources.indexOf(b)?a.val(b):a.val(SRC_PHB),a}).forEach(a=>a.change())}renderInput(){this.renderInputControls(),this._renderInputMain()}_renderInputMain(){this._sourcesCache=MiscUtil.copy(this._ui.allSources);const a=this._ui.$wrpInput.empty();this.doCreateProxies();const b=MiscUtil.debounce(()=>{DiceConvert.convertTraitActionDice(this._state),this._state.entriesHigherLevel&&(DiceConvert.convertTraitActionDice(this._state.entriesHigherLevel[0]),this._state.entriesHigherLevel=[...this._state.entriesHigherLevel]),this.renderOutput(),this.doUiSave(),this.isEntrySaved=!1,this.mutSavedButtonText()},33);this._cbCache=b,this._resetTabs("input");const c=["Info","Details","Sources","Misc"].map((a,b)=>this._getTab(b,a,{hasBorder:!0,tabGroup:"input",stateObj:this._meta,cbTabChange:this.doUiSave.bind(this)})),[d,e,f,g]=c;$$`<div class="flex-v-center w-100 no-shrink ui-tab__wrp-tab-heads--border">${c.map(a=>a.$btnTab)}</div>`.appendTo(a),c.forEach(b=>b.$wrpTab.appendTo(a)),BuilderUi.$getStateIptString("Name",b,this._state,{nullable:!1,callback:()=>this.renderSideMenu()},"name").appendTo(d.$wrpTab),this._$selSource=this.$getSourceInput(b).appendTo(d.$wrpTab),this.__$getOtherSourcesInput(b).appendTo(d.$wrpTab),BuilderUi.$getStateIptNumber("Page",b,this._state,{},"page").appendTo(d.$wrpTab),BuilderUi.$getStateIptEnum("Level",b,this._state,{nullable:!1,fnDisplay:a=>Parser.spLevelToFull(a),vals:[...Array(10)].map((a,b)=>b)},"level").appendTo(d.$wrpTab),BuilderUi.$getStateIptEnum("School",b,this._state,{nullable:!1,fnDisplay:a=>Parser.spSchoolAbvToFull(a),vals:[...Parser.SKL_ABVS]},"school").appendTo(d.$wrpTab),BuilderUi.$getStateIptStringArray("Subschools",b,this._state,{shortName:"Subschool",title:"Found in some homebrew, for example the 'Clockwork' sub-school."},"subschools").appendTo(d.$wrpTab),this.__$getTimeInput(b).appendTo(e.$wrpTab),this.__$getRangeInput(b).appendTo(e.$wrpTab),this.__$getComponentInput(b).appendTo(e.$wrpTab),this.__$getMetaInput(b).appendTo(e.$wrpTab),this.__$getDurationInput(b).appendTo(e.$wrpTab),BuilderUi.$getStateIptEntries("Text",b,this._state,{},"entries").appendTo(e.$wrpTab),BuilderUi.$getStateIptEntries("&quot;At Higher Levels&quot; Text",b,this._state,{nullable:!0,withHeader:"At Higher Levels"},"entriesHigherLevel").appendTo(e.$wrpTab),this.__$getClassesInputs(b).forEach(a=>a.appendTo(f.$wrpTab)),this.__$getRaces(b).appendTo(f.$wrpTab),this.__$getBackgrounds(b).appendTo(f.$wrpTab),$(`<div class="flex-vh-center w-100 mb-2"><i>Note: the following data is used by filters on the Spells page.</i></div>`).appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Damage Inflicted",b,this._state,{vals:MiscUtil.copy(Parser.DMG_TYPES),nullable:!0,fnDisplay:StrUtil.uppercaseFirst},"damageInflict").appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Conditions Inflicted",b,this._state,{vals:MiscUtil.copy(Parser.CONDITIONS),nullable:!0,fnDisplay:StrUtil.uppercaseFirst},"conditionInflict").appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Spell Attack Type",b,this._state,{vals:["M","R","O"],nullable:!0,fnDisplay:Parser.spAttackTypeToFull},"spellAttack").appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Saving Throw",b,this._state,{vals:Object.values(Parser.ATB_ABV_TO_FULL).map(a=>a.toLowerCase()),nullable:!0,fnDisplay:StrUtil.uppercaseFirst},"savingThrow").appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Opposed Check",b,this._state,{vals:Object.values(Parser.ATB_ABV_TO_FULL).map(a=>a.toLowerCase()),nullable:!0,fnDisplay:StrUtil.uppercaseFirst},"opposedCheck").appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Area Type",b,this._state,{vals:Object.keys(Parser.SPELL_AREA_TYPE_TO_FULL),nullable:!0,fnDisplay:Parser.spAreaTypeToFull},"areaTags").appendTo(g.$wrpTab),BuilderUi.$getStateIptBooleanArray("Misc Tags",b,this._state,{vals:Object.keys(Parser.SP_MISC_TAG_TO_FULL),nullable:!0,fnDisplay:Parser.spMiscTagToFull},"miscTags").appendTo(g.$wrpTab)}__$getOtherSourcesInput(a){const[b,c]=BuilderUi.getLabelledRowTuple("Other Sources",{isMarked:!0,title:"For example, various spells in Xanathar's Guide to Everything can also be found in the Elemental Evil Player's Companion."}),d=()=>{const b=e.map(a=>a.getOtherSource()).filter(Boolean);b.length?this._state.otherSources=b:delete this._state.otherSources,a()},e=[],f=$(`<div/>`).appendTo(c);(this._state.otherSources||[]).forEach(a=>this.__$getOtherSourcesInput__getOtherSourceRow(d,e,a).$wrp.appendTo(f));const g=$(`<div/>`).appendTo(c);return $(`<button class="btn btn-xs btn-default">Add Other Source</button>`).appendTo(g).click(()=>{this.__$getOtherSourcesInput__getOtherSourceRow(d,e,null).$wrp.appendTo(f),d()}),b}__$getOtherSourcesInput__getOtherSourceRow(a,b,c){const d=$(`<input class="form-control form-control--minimal input-xs" type="number">`).change(()=>a()).val(c&&c.page?c.page:null),e=this._$getSelSource("$selOtherSourceSources",a,c?c.source.escapeQuotes():SRC_PHB),f={getOtherSource:()=>{const a={source:e.val()},b=+d.val().trim();return b&&(a.page=b),a}},g=$(`<div class="text-right mb-2"/>`),h=$$`<div class="flex-col mkbru__wrp-rows mkbru__wrp-rows--removable">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Source</span>${e}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Page</span>${d}</div>
			${g}
		</div>`;return Builder.$getBtnRemoveRow(a,b,f,h,"Other Source").appendTo(g),f.$wrp=h,b.push(f),f}__$getTimeInput(a){const[b,c]=BuilderUi.getLabelledRowTuple("Casting Time",{isMarked:!0}),d=()=>{this._state.time=e.map(a=>a.getTime()),a()},e=[],f=$(`<div/>`).appendTo(c);this._state.time.forEach(a=>SpellBuilder.__$getTimeInput__getTimeRow(d,e,a).$wrp.appendTo(f));const g=$(`<div/>`).appendTo(c);return $(`<button class="btn btn-xs btn-default">Add Casting Time</button>`).appendTo(g).click(()=>{SpellBuilder.__$getTimeInput__getTimeRow(d,e,{number:1,unit:Parser.SP_TM_ACTION}).$wrp.appendTo(f),d()}),b}static __$getTimeInput__getTimeRow(a,b,c){const d=Object.keys(Parser.SP_TIME_TO_FULL),e=$(`<input class="form-control form-control--minimal input-xs mr-2" type="number">`).change(()=>a()).val(c.number),f=d.indexOf(c.unit),g=$(`<select class="form-control input-xs">
			${d.map((a,b)=>`<option value="${b}">${Parser.spTimeUnitToFull(a)}</option>`).join("")}
		</select>`).val(~f?`${f}`:"0").change(()=>{const b=d[g.val()]===Parser.SP_TM_REACTION;j.toggle(b),a()}),h=$(`<input class="form-control form-control--minimal input-xs" placeholder="which you take when...">`).change(()=>a()).val(c.condition),i={getTime:()=>{const a={number:+e.val(),unit:d[g.val()]},b=h.val().trim();return b&&d[g.val()]===Parser.SP_TM_REACTION&&(a.condition=b),a}},j=$$`<div class="flex-v-center mb-2">
			<span class="mr-2 mkbru__sub-name--33">Condition</span>${h}
		</div>`.toggle(2===f),k=$(`<div class="text-right mb-2"/>`),l=$$`<div class="flex-col mkbru__wrp-rows mkbru__wrp-rows--removable">
			<div class="flex-v-center mb-2">${e}${g}</div>
			${j}
			${k}
		</div>`;return Builder.$getBtnRemoveRow(a,b,i,l,"Time",{isProtectLast:!0}).appendTo(k),i.$wrp=l,b.push(i),i}__$getRangeInput(a){const[b,c]=BuilderUi.getLabelledRowTuple("Range",{isMarked:!0}),d=!!this._state.range.distance,e=this._state.range.distance&&null!=this._state.range.distance.amount,f=Parser.RANGE_TYPES,g=Parser.DIST_TYPES,h=()=>{const b=f[j.val()],c={type:b.type};if(b.hasDistance){const a=g[l.val()];c.distance={type:a.type},a.hasAmount&&(c.distance.amount=+o.val())}this._state.range=c,a()},i=f.findIndex(a=>a.type===this._state.range.type),j=$(`<select class="form-control input-xs">
			${f.map((a,b)=>`<option value="${b}">${Parser.spRangeTypeToFull(a.type)}</option>`).join("")}
		</select>`).val(~i?`${i}`:"0").change(()=>{const a=f[j.val()];m.toggle(a.hasDistance),a.isRequireAmount&&!g[l.val()].hasAmount?l.val(`${g.findIndex(a=>a.hasAmount)}`).change():h()});$$`<div class="flex-v-center">
			<span class="mr-2 mkbru__sub-name--33">Range Type</span>
			${j}
		</div>`.appendTo(c);const k=this._state.range.distance?g.findIndex(a=>a.type===this._state.range.distance.type):-1,l=$(`<select class="form-control input-xs">
			${g.map((a,b)=>`<option value="${b}">${Parser.spDistanceTypeToFull(a.type)}</option>`).join("")}
		</select>`).val(~k?`${k}`:"0").change(()=>{const a=g[l.val()];p.toggle(a.hasAmount),!a.hasAmount&&f[j.val()].isRequireAmount?l.val(`${g.findIndex(a=>a.hasAmount)}`).change():h()}),m=$$`<div class="flex-v-center mt-2">
			<span class="mr-2 mkbru__sub-name--33">Distance Type</span>
			${l}
		</div>`.appendTo(c).toggle(d),n=MiscUtil.get(this._state,"range","distance","amount"),o=$(`<input class="form-control form-control--minimal input-xs" type="number">`).change(()=>h()).val(n),p=$$`<div class="flex-v-center mt-2">
			<span class="mr-2 mkbru__sub-name--33">Distance Amount</span>
			${o}
		</div>`.appendTo(c).toggle(e);return b}__$getComponentInput(a){const[b,c]=BuilderUi.getLabelledRowTuple("Components",{isMarked:!0}),d=this._state.components&&null!=this._state.components.m?null!=this._state.components.m.consume||null!=this._state.components.m.cost||null!=this._state.components.m.text?"2":"string"==typeof this._state.components.m?"1":"3":"0",e=()=>{const b={};f.prop("checked")&&(b.v=!0),g.prop("checked")&&(b.s=!0),h.prop("checked")&&(b.r=!0);const c=j.val();switch(c){case"1":b.m=i.val().trim()||!0;break;case"2":{b.m={text:i.val().trim()||!0},l.prop("checked")&&(b.m.consumed=!0),m.val().trim()&&(b.m.cost=+m.val().trim());break}case"3":b.m=!0;}Object.keys(b).length?this._state.components=b:delete this._state.components,a()},f=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",this._state.components&&this._state.components.v).change(()=>e()),g=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",this._state.components&&this._state.components.s).change(()=>e()),h=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",this._state.components&&this._state.components.r).change(()=>e()),i=$(`<input class="form-control form-control--minimal input-xs">`).val("1"===d?this._state.components.m:"2"===d?this._state.components.m.text:null).change(()=>e()),j=$(`<select class="form-control input-xs">
			<option value="0">(None)</option>
			<option value="1">Has Material Component</option>
			<option value="2">Has Consumable/Costed Material Component</option>
			<option value="3">Has Generic Material Component</option>
		</select>`).val(d).change(()=>{switch(j.val()){case"0":k.hide(),o.hide();break;case"1":k.show(),o.hide();break;case"2":k.show(),o.show();break;case"3":k.hide(),o.hide();}e()});$$``.appendTo(c),$$`<div>
			<div class="flex-v-center mb-2"><div class="mr-2 mkbru__sub-name--33">Verbal</div>${f}</div>
			<div class="flex-v-center mb-2"><div class="mr-2 mkbru__sub-name--33">Somatic</div>${g}</div>
			<div class="flex-v-center mt-2"><div class="mr-2 mkbru__sub-name--33">Royalty</div>${h}</div>
			<div class="flex-v-center"><div class="mr-2 mkbru__sub-name--33">Material Type</div>${j}</div>
		</div>`.appendTo(c);const k=$$`<div class="flex-v-center mt-2"><div class="mr-2 mkbru__sub-name--33">Materials</div>${i}</div>`.appendTo(c).toggle("1"===d||"2"===d),l=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",this._state.components&&this._state.components.m&&this._state.components.m.consume).change(()=>e()),m=$(`<input type="number" class="form-control form-control--minimal input-xs">`).val(this._state.components&&this._state.components.m&&this._state.components.m.cost?this._state.components.m.cost:null).change(()=>e()),n="Used in filtering/external applications. The full text of the material component should be entered in the &quot;Materials&quot; field, above.",o=$$`<div class="mt-2">
			<div class="flex-v-center mb-2"><div class="mr-2 mkbru__sub-name--33 help" title="${n}">Is Consumed</div>${l}</div>
			<div class="flex-v-center"><div class="mr-2 mkbru__sub-name--33 help" title="${n}">Component Cost</div>${m}</div>
		</div>`.appendTo(c).toggle("2"===d);return b}__$getMetaInput(a){const[b,c]=BuilderUi.getLabelledRowTuple("Tags",{isMarked:!0}),d=()=>{const b={};e.prop("checked")&&(b.ritual=!0),f.prop("checked")&&(b.technomagic=!0),Object.keys(b).length?this._state.meta=b:delete this._state.meta,a()},e=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",this._state.meta&&this._state.meta.ritual).change(()=>d()),f=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",this._state.meta&&this._state.meta.technomagic).change(()=>d());return $$`<div>
			<div class="flex-v-center mb-2"><div class="mr-2 mkbru__sub-name--33">Ritual</div>${e}</div>
			<div class="flex-v-center"><div class="mr-2 mkbru__sub-name--33">Technomagic</div>${f}</div>
		</div>`.appendTo(c),b}__$getDurationInput(a){const[b,c]=BuilderUi.getLabelledRowTuple("Duration",{isMarked:!0}),d=()=>{this._state.duration=e.map(a=>a.getDuration()),a()},e=[],f=$(`<div/>`).appendTo(c);this._state.duration.forEach(a=>SpellBuilder.__$getDurationInput__getDurationRow(d,e,a).$wrp.appendTo(f));const g=$(`<div/>`).appendTo(c);return $(`<button class="btn btn-xs btn-default">Add Duration</button>`).appendTo(g).click(()=>{SpellBuilder.__$getDurationInput__getDurationRow(d,e,{type:"instant"}).$wrp.appendTo(f),d()}),b}static __$getDurationInput__getDurationRow(a,b,c){const d=Parser.DURATION_TYPES,e=Parser.DURATION_AMOUNT_TYPES,f=d.find(a=>a.type===c.type),g=d.findIndex(a=>a.type===c.type),h=$(`<select class="form-control input-xs">
			${d.map((a,b)=>`<option value="${b}">${a.full||a.type.toTitleCase()}</option>`).join("")}
		</select>`).val(~g?`${g}`:"0").change(()=>{const b=d[h.val()];n.toggle(!!b.hasAmount),r.toggle(!!b.hasEnds),a()}),i=c.duration?e.indexOf(c.duration.type):"0",j=$(`<select class="form-control input-xs">
			${e.map((a,b)=>`<option value="${b}">${a.toTitleCase()}s</option>`).join("")}
		</select>`).val(i).change(()=>a()),k=$(`<input type="number" class="form-control form-control--minimal input-xs mr-2">`).val(c.duration?c.duration.amount:null).change(()=>a()),l=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",!!c.concentration).change(()=>a()),m=$(`<input type="checkbox" class="mkbru__ipt-cb--plain">`).prop("checked",!!c.duration&&c.duration.upTo).change(()=>a()),n=$$`<div class="flex-col mb-2">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Concentration</span>${l}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33 help" title="For a spell with Concentration, this has no effect, as it is assumed that the spell can be ended at any time by ending concentration.">Up To...</span>${m}</div>
			<div class="flex-v-center">${k}${j}</div>
		</div>`.toggle(!!f.hasAmount),o=[],p=$(`<div class="flex-col"/>`),q=$(`<button class="btn btn-xs btn-default">Add &quot;Until&quot; Clause</button>`).click(()=>{SpellBuilder.__$getDurationInput__getDurationRow__getEndRow(a,o,"dispel").$wrp.appendTo(p),a()}),r=$$`<div class="mb-2">
			${p}
			<div class="text-right">${q}</div>
		</div>`.toggle(!!f.hasEnds);c.ends&&c.ends.forEach(b=>SpellBuilder.__$getDurationInput__getDurationRow__getEndRow(a,o,b).$wrp.appendTo(p));const s={getDuration:()=>{const a=h.val(),b={type:d[a].type};switch(a){case"1":{b.duration={type:e[j.val()],amount:+k.val()},l.prop("checked")&&(b.concentration=!0),m.prop("checked")&&(b.duration.upTo=!0);break}case"2":o.length&&(b.ends=o.map(a=>a.getEnd()));}return b}},t=$(`<div class="text-right mb-2"/>`),u=$$`<div class="flex-col mkbru__wrp-rows mkbru__wrp-rows--removable">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Duration Type</span>${h}</div>
			${n}
			${r}
			${t}
		</div>`;return Builder.$getBtnRemoveRow(a,b,s,u,"Duration",{isProtectLast:!0}).appendTo(t),s.$wrp=u,b.push(s),s}static __$getDurationInput__getDurationRow__getEndRow(a,b,c){const d=Object.keys(Parser.SP_END_TYPE_TO_FULL),e=c?d.indexOf(c):"0",f=$(`<select class="form-control input-xs mr-2">
			${d.map((a,b)=>`<option value="${b}">Until ${Parser.spEndTypeToFull(a)}</option>`).join("")}
		</select>`).val(e).change(()=>a()),g={getEnd:()=>d[f.val()]},h=$(`<div/>`),i=$$`<div class="flex">
			<div class="mkbru__sub-name--33 mr-2"></div>
			<div class="mb-2 flex-v-center w-100">${f}${h}</div>
		</div>`;return Builder.$getBtnRemoveRow(a,b,g,i,"Until Clause",{isExtraSmall:!0}).appendTo(h),g.$wrp=i,b.push(g),g}__$getClassesInputs(a){const b={name:"Wizard",source:SRC_PHB},c={name:"Evocation",source:SRC_PHB},[d,e]=BuilderUi.getLabelledRowTuple("Classes",{isMarked:!0}),[f,g]=BuilderUi.getLabelledRowTuple("Subclasses",{isMarked:!0}),h=[],i=[],j=()=>{const b={fromClassList:h.map(a=>a.getClass())},c=i.map(a=>a.getSubclass()).filter(Boolean);c.length&&(b.fromSubclass=c),this._state.classes=b,a()},k=$(`<div/>`).appendTo(e);this._state.classes.fromClassList.forEach(a=>this.__$getClassesInputs__getClassRow(j,h,a).$wrp.appendTo(k));const l=$(`<div/>`).appendTo(e);$(`<button class="btn btn-xs btn-default">Add Class</button>`).appendTo(l).click(()=>{this.__$getClassesInputs__getClassRow(j,h,MiscUtil.copy(b)).$wrp.appendTo(k),j()});const m=$(`<div/>`).appendTo(g);(this._state.classes.fromSubclass||[]).forEach(a=>this.__$getClassesInputs__getSubclassRow(j,i,a).$wrp.appendTo(m));const n=$(`<div/>`).appendTo(g);return $(`<button class="btn btn-xs btn-default">Add Subclass</button>`).appendTo(n).click(()=>{this.__$getClassesInputs__getSubclassRow(j,i,{class:MiscUtil.copy(b),subclass:MiscUtil.copy(c)}).$wrp.appendTo(m),j()}),[d,f]}__$getClassesInputs__getClassRow(a,b,c){const d=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c.name),e=this._$getSelSource("$selClassSources",a,c.source.escapeQuotes()),f={getClass:()=>({name:d.val().trim(),source:e.val().unescapeQuotes()})},g=$(`<div class="text-right mb-2"/>`),h=$$`<div class="flex-col mkbru__wrp-rows mkbru__wrp-rows--removable">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Class Name</span>${d}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Class Source</span>${e}</div>
			${g}
		</div>`;return Builder.$getBtnRemoveRow(a,b,f,h,"Class",{isProtectLast:!0}).appendTo(g),f.$wrp=h,b.push(f),f}__$getClassesInputs__getSubclassRow(a,b,c){const d=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c.class.name),e=this._$getSelSource("$selClassSources",a,c.class.source.escapeQuotes()),f=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c.subclass.name),g=this._$getSelSource("$selSubclassSources",a,c.subclass.source.escapeQuotes()),h=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c.subclass.subSubclass?c.subclass.subSubclass:null),i={getSubclass:()=>{const a=d.val().trim(),b=f.val().trim();if(!a||!b)return null;const c={class:{name:a,source:e.val().unescapeQuotes()},subclass:{name:f.val(),source:g.val().unescapeQuotes()}},i=h.val().trim();return i&&(c.subclass.subSubclass=i),c}},j=$(`<div class="text-right mb-2"/>`),k=$$`<div class="flex-col mkbru__wrp-rows">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Class Name</span>${d}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Class Source</span>${e}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Subclass Name</span>${f}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Subclass Source</span>${g}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33 help" title="For example, for a Circle of the Coast Land Druid, enter &quot;Coast&quot;">Sub-Subclass Name</span>${h}</div>
			${j}
		</div>`;return Builder.$getBtnRemoveRow(a,b,i,k,"Subclass").appendTo(j),i.$wrp=k,b.push(i),i}__$getRaces(a){const[b,c]=BuilderUi.getLabelledRowTuple("Races",{isMarked:!0}),d=()=>{const b=e.map(a=>a.getRace()).filter(Boolean);b.length?this._state.races=b:delete this._state.races,a()},e=[],f=$(`<div/>`).appendTo(c);(this._state.races||[]).forEach(a=>this.__$getRaces__getRaceRow(d,e,a).$wrp.appendTo(f));const g=$(`<div/>`).appendTo(c);return $(`<button class="btn btn-xs btn-default">Add Race</button>`).appendTo(g).click(()=>{this.__$getRaces__getRaceRow(d,e,null).$wrp.appendTo(f),d()}),b}__$getRaces__getRaceRow(a,b,c){const d=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c?c.name:null),e=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c?c.baseName:null),f=this._$getSelSource("$selRaceSources",a,c?c.source.escapeQuotes():SRC_PHB),g=this._$getSelSource("$selBaseRaceSources",a,c&&c.baseSource?c.baseSource.escapeQuotes():SRC_PHB),h={getRace:()=>{const a=d.val().trim();if(a){const b={name:a,source:f.val().unescapeQuotes()},c=e.val().trim();return c&&(b.baseName=c,b.baseSource=g.val().unescapeQuotes()),b}return null}},i=$(`<div class="text-right mb-2"/>`),j=$$`<div class="flex-col mkbru__wrp-rows">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Name</span>${d}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Source</span>${f}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33 help" title="The name of the base race, e.g. &quot;Elf&quot;. This is used in filtering.">Base Name</span>${e}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33 help" title="For example, the &quot;Elf&quot; base race has a source of &quot;${SRC_PHB}&quot;">Base Source</span>${g}</div>
			${i}
		</div>`;return Builder.$getBtnRemoveRow(a,b,h,j,"Race").appendTo(i),h.$wrp=j,b.push(h),h}__$getBackgrounds(a){const[b,c]=BuilderUi.getLabelledRowTuple("Backgrounds",{isMarked:!0}),d=()=>{const b=e.map(a=>a.getBackground()).filter(Boolean);b.length?this._state.backgrounds=b:delete this._state.backgrounds,a()},e=[],f=$(`<div/>`).appendTo(c);(this._state.backgrounds||[]).forEach(a=>this.__$getBackgrounds__getBackgroundRow(d,e,a).$wrp.appendTo(f));const g=$(`<div/>`).appendTo(c);return $(`<button class="btn btn-xs btn-default">Add Background</button>`).appendTo(g).click(()=>{this.__$getBackgrounds__getBackgroundRow(d,e,null).$wrp.appendTo(f),d()}),b}__$getBackgrounds__getBackgroundRow(a,b,c){const d=$(`<input class="form-control form-control--minimal input-xs">`).change(()=>a()).val(c?c.name:null),e=this._$getSelSource("$selBackgroundSources",a,c?c.source.escapeQuotes():SRC_PHB),f={getBackground:()=>{const a=d.val().trim();return a?{name:a,source:e.val().unescapeQuotes()}:null}},g=$(`<div class="text-right mb-2"/>`),h=$$`<div class="flex-col mkbru__wrp-rows">
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Name</span>${d}</div>
			<div class="flex-v-center mb-2"><span class="mr-2 mkbru__sub-name--33">Source</span>${e}</div>
			${g}
		</div>`;return Builder.$getBtnRemoveRow(a,b,f,h,"Background").appendTo(g),f.$wrp=h,b.push(f),f}_$getSelSource(a,b,c){const d=$(`<select class="form-control input-xs"/>`).change(()=>b());return[...Object.keys(Parser.SOURCE_JSON_TO_FULL),...this._ui.allSources].forEach(a=>d.append(`<option value="${a.escapeQuotes()}">${Parser.sourceJsonToFull(a).escapeQuotes()}</option>`)),null!=c&&d.val(c),(this._$eles[a]=this._$eles[a]||[]).push(d),d}renderOutput(){this._renderOutputDebounced(),this.mutSavedButtonText()}_renderOutput(){const a=this._ui.$wrpOutput.empty();this._resetTabs("output");const b=["Spell","Data"].map((a,b)=>this._getTab(b,a,{tabGroup:"output",stateObj:this._meta,cbTabChange:this.doUiSave.bind(this)})),[c,d]=b;$$`<div class="flex-v-center w-100 no-shrink">${b.map(a=>a.$btnTab)}</div>`.appendTo(a),b.forEach(b=>b.$wrpTab.appendTo(a));const e=$(`<table class="stats"/>`).appendTo(c.$wrpTab),f=MiscUtil.copy(this._state);RenderSpells.initClasses(f),RenderSpells.$getRenderedSpell(f,this._subclassLookup).appendTo(e);const g=$(`<table class="stats stats--book" style="box-shadow: none; border-left: 1px solid #ccc; border-right: 1px solid #ccc;"/>`).appendTo(d.$wrpTab),h=Renderer.get().render({type:"entries",entries:[{type:"code",name:`Data`,preformatted:JSON.stringify(DataUtil.cleanJson(MiscUtil.copy(this._state)),null,"\t")}]});g.append(Renderer.utils.getBorderTr()),g.append(`<tr><td colspan="6">${h}</td></tr>`),g.append(Renderer.utils.getBorderTr())}}const spellBuilder=new SpellBuilder;ui.spellBuilder=spellBuilder,spellBuilder.ui=ui;