class RenderSpells{static $getRenderedSpell(a,b){const c=Renderer.get(),d=[];c.setFirstSection(!0),d.push(`
			${Renderer.utils.getBorderTr()}
			${Renderer.utils.getNameTr(a)}
			<tr><td class="levelschoolritual" colspan="6"><span>${Parser.spLevelSchoolMetaToFull(a.level,a.school,a.meta,a.subschools)}</span></td></tr>
			<tr><td class="castingtime" colspan="6"><span class="bold">Casting Time: </span>${Parser.spTimeListToFull(a.time)}</td></tr>
			<tr><td class="range" colspan="6"><span class="bold">Range: </span>${Parser.spRangeToFull(a.range)}</td></tr>
			<tr><td class="components" colspan="6"><span class="bold">Components: </span>${Parser.spComponentsToFull(a.components,a.level)}</td></tr>
			<tr><td class="range" colspan="6"><span class="bold">Duration: </span>${Parser.spDurationToFull(a.duration)}</td></tr>
			${Renderer.utils.getDividerTr()}
		`);const e={type:"entries",entries:a.entries};if(d.push(`<tr class='text'><td colspan='6' class='text'>`),c.recursiveRender(e,d,{depth:1}),a.entriesHigherLevel){const b={type:"entries",entries:a.entriesHigherLevel};c.recursiveRender(b,d,{depth:2})}if(d.push(`</td></tr>`),d.push(`<tr class="text"><td class="classes" colspan="6"><span class="bold">Classes: </span>${Parser.spMainClassesToFull(a.classes)}</td></tr>`),a.classes.fromSubclass){const c=Parser.spSubclassesToCurrentAndLegacyFull(a.classes,b);d.push(`<tr class="text"><td colspan="6"><span class="bold">Subclasses: </span>${c[0]}</td></tr>`),c[1]&&d.push(`<tr class="text"><td colspan="6"><section class="text-muted"><span class="bold">Subclasses (legacy): </span>${c[1]}</section></td></tr>`)}return a.races&&d.push(`<tr class="text"><td class="classes" colspan="6"><span class="bold">Races: </span>${a.races.map(a=>c.render(`{@race ${a.name}|${a.source}}`)).join(", ")}</td></tr>`),a.backgrounds&&d.push(`<tr class="text"><td class="classes" colspan="6"><span class="bold">Backgrounds: </span>${a.backgrounds.sort((c,a)=>SortUtil.ascSortLower(c.name,a.name)).map(a=>c.render(`{@background ${a.name}|${a.source}}`)).join(", ")}</td></tr>`),a._scrollNote&&(d.push(`<tr class="text"><td colspan="6"><section class="text-muted">`),c.recursiveRender(`{@italic Note: Both the {@class ${RenderSpells.STR_FIGHTER} (${RenderSpells.STR_ELD_KNIGHT})} and the {@class ${RenderSpells.STR_ROGUE} (${RenderSpells.STR_ARC_TCKER})} spell lists include all {@class ${RenderSpells.STR_WIZARD}} spells. Spells of 5th level or higher may be cast with the aid of a spell scroll or similar.}`,d,{depth:2}),d.push(`</section></td></tr>`)),d.push(`
			${Renderer.utils.getPageTr(a)}
			${Renderer.utils.getBorderTr()}
		`),$(d.join(""))}static async pGetSubclassLookup(){const a={};Object.assign(a,(await DataUtil.loadJSON(`data/generated/gendata-subclass-lookup.json`)));const b=await BrewUtil.pAddBrewData();return RenderSpells.mergeHomebrewSubclassLookup(a,b),a}static mergeHomebrewSubclassLookup(a,b){b.class&&b.class.filter(a=>a.subclasses).forEach(b=>{(a[b.source]=a[b.source]||{})[b.name]=a[b.source][b.name]||{};const c=a[b.source][b.name];b.subclasses.forEach(a=>{(c[a.source]=c[a.source]||{})[a.shortName||a.name]=c[a.source][a.shortName||a.name]||a.name})}),b.subclass&&b.subclass.forEach(b=>{const c=b.classSource||SRC_PHB;(a[c]=a[c]||{})[b.class]=a[c][b.class]||{};const d=a[c][b.class];(d[b.source]=d[b.source]||{})[b.shortName||b.name]=d[b.source][b.shortName||b.name]||b.name})}static initClasses(a,b){if(!a._isInitClasses&&(a._isInitClasses=!0,a.classes.fromClassList&&a.classes.fromClassList.filter(a=>a.name===RenderSpells.STR_WIZARD&&a.source===SRC_PHB).length&&(!a.classes.fromSubclass&&(a.classes.fromSubclass=[]),a.classes.fromSubclass.push({class:{name:RenderSpells.STR_FIGHTER,source:SRC_PHB},subclass:{name:RenderSpells.STR_ELD_KNIGHT,source:SRC_PHB}}),a.classes.fromSubclass.push({class:{name:RenderSpells.STR_ROGUE,source:SRC_PHB},subclass:{name:RenderSpells.STR_ARC_TCKER,source:SRC_PHB}}),4<a.level&&(a._scrollNote=!0)),a.classes.fromClassList&&a.classes.fromClassList.filter(a=>a.name===RenderSpells.STR_CLERIC&&a.source===SRC_PHB).length&&(a.classes.fromSubclass?!a.classes.fromSubclass.find(a=>a.class.name===RenderSpells.STR_SORCERER&&a.class.source===SRC_PHB&&a.subclass.name===RenderSpells.STR_DIV_SOUL&&a.subclass.source===SRC_XGE)&&a.classes.fromSubclass.push({class:{name:RenderSpells.STR_SORCERER,source:SRC_PHB},subclass:{name:RenderSpells.STR_DIV_SOUL,source:SRC_XGE}}):(a.classes.fromSubclass=[],a.classes.fromSubclass.push({class:{name:RenderSpells.STR_SORCERER,source:SRC_PHB},subclass:{name:RenderSpells.STR_DIV_SOUL,source:SRC_XGE}})),a.classes.fromSubclass.push({class:{name:RenderSpells.STR_SORCERER,source:SRC_PHB},subclass:{name:RenderSpells.STR_FAV_SOUL_V2,source:SRC_UAS}}),a.classes.fromSubclass.push({class:{name:RenderSpells.STR_SORCERER,source:SRC_PHB},subclass:{name:RenderSpells.STR_FAV_SOUL_V3,source:SRC_UARSC}})),a.classes.fromClassList&&a.classes.fromClassList.find(a=>"Wizard"===a.name)&&(0===a.level&&((a.races||(a.races=[])).push({name:"Elf (High)",source:SRC_PHB,baseName:"Elf",baseSource:SRC_PHB}),(a.classes.fromSubclass=a.classes.fromSubclass||[]).push({class:{name:RenderSpells.STR_CLERIC,source:SRC_PHB},subclass:{name:"Arcana",source:SRC_SCAG}})),6<=a.level&&(a.classes.fromSubclass=a.classes.fromSubclass||[]).push({class:{name:RenderSpells.STR_CLERIC,source:SRC_PHB},subclass:{name:"Arcana",source:SRC_SCAG}})),a.classes.fromClassList&&a.classes.fromClassList.find(a=>"Druid"===a.name)&&0===a.level&&(a.classes.fromSubclass=a.classes.fromSubclass||[]).push({class:{name:RenderSpells.STR_CLERIC,source:SRC_PHB},subclass:{name:"Nature",source:SRC_PHB}}),b)){const c=a.name.toLowerCase();b[a.source]&&b[a.source][c]&&(a.classes=a.classes||{},b[a.source][c].fromClassList.length&&(a.classes.fromClassList=a.classes.fromClassList||[],a.classes.fromClassList=a.classes.fromClassList.concat(b[a.source][c].fromClassList)),b[a.source][c].fromSubclass.length&&(a.classes.fromSubclass=a.classes.fromSubclass||[],a.classes.fromSubclass=a.classes.fromSubclass.concat(b[a.source][c].fromSubclass)))}}}RenderSpells.STR_WIZARD="Wizard",RenderSpells.STR_FIGHTER="Fighter",RenderSpells.STR_ROGUE="Rogue",RenderSpells.STR_CLERIC="Cleric",RenderSpells.STR_SORCERER="Sorcerer",RenderSpells.STR_ELD_KNIGHT="Eldritch Knight",RenderSpells.STR_ARC_TCKER="Arcane Trickster",RenderSpells.STR_DIV_SOUL="Divine Soul",RenderSpells.STR_FAV_SOUL_V2="Favored Soul v2 (UA)",RenderSpells.STR_FAV_SOUL_V3="Favored Soul v3 (UA)";