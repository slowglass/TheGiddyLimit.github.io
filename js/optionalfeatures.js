"use strict";function optFeatSort(a,b,c){if("level"===c.valueName){const d=+a.values().level.toLowerCase()||0,e=+b.values().level.toLowerCase()||0;return SortUtil.ascSort(d,e)||SortUtil.listSort(a,b,c)}return SortUtil.listSort(a,b,c)}function filterFeatureTypeSort(c,a){return SortUtil.ascSort(Parser.optFeatureTypeToFull(c.item),Parser.optFeatureTypeToFull(a.item))}class OptionalFeaturesPage extends ListPage{constructor(){const a=getSourceFilter(),b=new Filter({header:"Feature Type",items:["AI","ED","EI","MM","MV:B","OTH","FS:F","FS:B","FS:P","FS:R","PB"],displayFn:Parser.optFeatureTypeToFull,itemSortFn:filterFeatureTypeSort}),c=new Filter({header:"Pact Boon",items:["Blade","Chain","Tome"],displayFn:Parser.prereqPactToFull}),d=new Filter({header:"Otherworldly Patron",items:["The Archfey","The Fiend","The Great Old One","The Hexblade","The Kraken","The Raven Queen","The Seeker"],displayFn:Parser.prereqPatronToShort}),e=new Filter({header:"Spell",items:["eldritch blast","hex/curse"],displayFn:StrUtil.toTitleCase}),f=new Filter({header:"Feature",displayFn:StrUtil.toTitleCase}),g=new Filter({header:"Level",itemSortFn:SortUtil.ascSortNumericalSuffix,nests:[]}),h=new MultiFilter({header:"Prerequisite",filters:[c,d,e,g,f]});super({dataSource:"data/optionalfeatures.json",filters:[a,b,h],filterSource:a,listValueNames:["name","source","prerequisite","level","type","uniqueid"],listClass:"optfeatures",listOptions:{sortFunction:optFeatSort},sublistValueNames:["name","ability","prerequisite","level","id"],sublistClass:"suboptfeatures",sublistOptions:{sortFunction:optFeatSort},dataProps:["optionalfeature"]}),this._sourceFilter=a,this._typeFilter=b,this._pactFilter=c,this._patronFilter=d,this._spellFilter=e,this._featureFilter=f,this._levelFilter=g}getListItem(a,b){return a.featureType=a.featureType||"OTH",a.prerequisite&&(a._sPrereq=!0,a._fPrereqPact=a.prerequisite.filter(a=>"prereqPact"===a.type).map(a=>(this._pactFilter.addItem(a.entry),a.entry)),a._fPrereqPatron=a.prerequisite.filter(a=>"prereqPatron"===a.type).map(a=>(this._patronFilter.addItem(a.entry),a.entry)),a._fprereqSpell=a.prerequisite.filter(a=>"prereqSpell"===a.type).map(a=>{const b=(a.entries||[]).map(a=>a.split("#")[0]);return this._spellFilter.addItem(b),b}),a._fprereqFeature=a.prerequisite.filter(a=>"prereqFeature"===a.type).map(a=>(this._featureFilter.addItem(a.entries),a.entries)),a._fPrereqLevel=a.prerequisite.filter(a=>"prereqLevel"===a.type).map(a=>{const b=new FilterItem({item:`${a.class.name}${a.subclass?` (${a.subclass.name})`:""} Level ${a.level}`,nest:a.class.name});return this._levelFilter.addNest(a.class.name,{isHidden:!0}),this._levelFilter.addItem(b),b})),a.featureType instanceof Array?(a._dFeatureType=a.featureType.map(a=>Parser.optFeatureTypeToFull(a)),a._lFeatureType=a.featureType.join(", "),a.featureType.sort((c,a)=>SortUtil.ascSortLower(Parser.optFeatureTypeToFull(c),Parser.optFeatureTypeToFull(a)))):(a._dFeatureType=Parser.optFeatureTypeToFull(a.featureType),a._lFeatureType=a.featureType),this._sourceFilter.addItem(a.source),this._typeFilter.addItem(a.featureType),`
			<li class="row" ${FLTR_ID}="${b}" onclick="ListUtil.toggleSelected(event, this)" oncontextmenu="ListUtil.openContextMenu(event, this)">
				<a id="${b}" href="#${UrlUtil.autoEncodeHash(a)}" title="${a.name}">
					<span class="name col-3-2 pl-0">${a.name}</span>
					<span class="type col-1-5 text-center type" title="${a._dFeatureType}">${a._lFeatureType}</span>
					<span class="prerequisite col-4-8">${Renderer.optionalfeature.getPrerequisiteText(a.prerequisite,!0)}</span>
					<span class="level col-1 text-center">${Renderer.optionalfeature.getListPrerequisiteLevelText(a.prerequisite)}</span>
					<span class="source col-1-5 ${Parser.sourceJsonToColor(a.source)} text-center pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${Parser.sourceJsonToAbv(a.source)}</span>
					
					<span class="uniqueid hidden">${a.uniqueId?a.uniqueId:b}</span>
				</a>
			</li>
		`}handleFilterChange(){const a=this._filterBox.getValues();this._list.filter(b=>{const c=this._dataList[$(b.elm).attr(FLTR_ID)];return this._filterBox.toDisplay(a,c.source,c.featureType,[c._fPrereqPact,c._fPrereqPatron,c._fprereqSpell,c._fPrereqLevel,c._fprereqFeature])}),FilterBox.selectFirstVisible(this._dataList)}getSublistItem(a,b){return`
			<li class="row" ${FLTR_ID}="${b}" oncontextmenu="ListUtil.openSubContextMenu(event, this)">
				<a href="#${UrlUtil.autoEncodeHash(a)}" title="${a.name}">
					<span class="name col-4 pl-0">${a.name}</span>
					<span class="source col-2 text-center type" title="${Parser.optFeatureTypeToFull(a.featureType)}">${a.featureType}</span>
					<span class="prerequisite col-4-5">${Renderer.optionalfeature.getPrerequisiteText(a.prerequisite,!0)}</span>
					<span class="level col-1-5 pr-0">${Renderer.optionalfeature.getListPrerequisiteLevelText(a.prerequisite)}</span>
					
					<span class="id hidden">${b}</span>
				</a>
			</li>
		`}doLoadHash(a){const b=this._dataList[a],c=$(`#stat-tabs`);c.find(`.opt-feature-type`).remove();const d=$(`<div class="opt-feature-type"/>`).prependTo(c);if(b.featureType instanceof Array){const a=MiscUtil.findCommonPrefix(b.featureType.map(a=>Parser.optFeatureTypeToFull(a)));a&&d.append(`${a.trim()} `),b.featureType.forEach((b,c)=>{0<c&&d.append("/"),$(`<span class="roller">${Parser.optFeatureTypeToFull(b).substring(a.length)}</span>`).click(()=>{filterBox.setFromValues({"Feature Type":{[b]:1}}),handleFilterChange()}).appendTo(d)})}else $(`<span class="roller">${Parser.optFeatureTypeToFull(b.featureType)}</span>`).click(()=>{filterBox.setFromValues({"Feature Type":{[b.featureType]:1}}),handleFilterChange()}).appendTo(d);$(`#pagecontent`).empty().append(RenderOptionalFeatures.$getRenderedOptionalFeature(b)),ListUtil.updateSelected()}doLoadSubHash(a){a=this._filterBox.setFromSubHashes(a),ListUtil.setFromSubHashes(a)}}const optionalFeaturesPage=new OptionalFeaturesPage;window.addEventListener("load",()=>optionalFeaturesPage.pOnLoad());