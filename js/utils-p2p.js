"use strict";const STUN_SERVERS=[`stun1.l.google.com:19302`,`stun2.l.google.com:19302`,`stun3.l.google.com:19302`,`stun4.l.google.com:19302`];class Peer{constructor(a){this._role=a,this._ctx=null,this._isActive=!1,this._isClosed=!1,this._pChannel=null}get isActive(){return this._isActive}get isClosed(){return this._isClosed}_createPeerConnection(a,b){b=b||(a=>setTimeout(()=>{throw new Error(a)}));const c=a.bind(this),d=b.bind(this),e=new RTCPeerConnection({iceServers:STUN_SERVERS.map(a=>({url:`stun:${a}`}))});this._pChannel=new Promise(a=>{e.addEventListener("datachannel",b=>{b.channel.addEventListener("message",a=>c(JSON.parse(a.data))),b.channel.addEventListener("close",()=>{this._ctx=null,this._isActive=!1,this._isClosed=!0}),b.channel.addEventListener("error",a=>d(a)),a()})});const f=e.createDataChannel(this._role);return{pc:e,dc:f}}close(){this._ctx?this._ctx.pc.close():(this._isActive=!1,this._isClosed=!0)}async sendMessage(a){if(!this._isActive)throw new Error(`Connection is not active!`);const b={head:{type:this._role,version:"0.0.1"},data:a};this._ctx.dc.send(JSON.stringify(b))}}class PeerServer extends Peer{constructor(){super("server")}async pMakeOffer(a,b){return new Promise((c,d)=>{this._ctx=this._createPeerConnection(a,b),this._ctx.pc.addEventListener("icecandidate",a=>{a.candidate||c(this._ctx.pc.localDescription.sdp)}),this._ctx.pc.createOffer().then(a=>this._ctx.pc.setLocalDescription(a)).catch(a=>d(a))})}async pAcceptAnswer(a){const b=new RTCSessionDescription({type:"answer",sdp:`${(a||"").trim()}\n`});await this._ctx.pc.setRemoteDescription(b),await this._pChannel,this._isActive=!0}}class PeerClient extends Peer{constructor(){super("client")}async pReceiveOfferAndGetAnswer(a,b,c){return new Promise((d,e)=>{this._ctx=this._createPeerConnection(b,c);const f=new RTCSessionDescription({type:"offer",sdp:`${(a||"").trim()}\n`});this._ctx.pc.setRemoteDescription(f).then(()=>{this._ctx.pc.addEventListener("icecandidate",a=>{a.candidate||(this._isActive=!0,d(this._ctx.pc.localDescription.sdp))}),this._ctx.pc.createAnswer().then(a=>this._ctx.pc.setLocalDescription(a)).catch(a=>e(a))})})}}class PeerUtil{static async pInitialiseServers(a,b,c,d){if(d=d||{},a=a.map(a=>Parser.stringToSlug(a).toUpperCase()),a.length!==new Set(a).size){const b={};a.forEach(a=>b[a]=(b[a]||0)+1),a=[],Object.entries(b).forEach(([b,c])=>{a.push(b),[...Array(c-1)].forEach((c,d)=>a.push(`${b}-${d+1}`))})}return PeerUtil._pMapNamesToServers(a,b,c,d)}static async _pMapNamesToServers(a,b,c,d){return d=d||{},Promise.all(a.map(async a=>{const e=new PeerServer,f=await e.pMakeOffer(b,c);return{name:a,textifiedSdp:PeerUtil._packToken(a,f,!!d.shortTokens),server:e}}))}static async pInitialiseServersAddToExisting(a,b,c,d,e){e=e||{};const f=b.filter(a=>!a.isDeleted).map(a=>a.name);a=a.map(a=>(a=PeerUtil.getNextAvailableName(f,a),f.push(a),a));const g=await PeerUtil._pMapNamesToServers(a,c,d,e);return b.push(...g),g}static getNextAvailableName(a,b){a=new Set(a.map(a=>a.replace(/-/g," ").toUpperCase()));const c=Parser.stringToSlug(b).toUpperCase();if(!a.has(c))return c;let d=1,e=`${c}-${d}`;for(;a.has(e);)d++,e=`${c}-${d}`;return e}static _packToken(a,b,c){function d(){return b.split("\n").map(a=>a.trim().replace(/^(.)=/,"$1")).join("\n")}b=b.trim();const e=d(b),f=(()=>{function a(a){return a.slice(0,5).equals(PeerUtil.LZMA_HEADER)?a.slice(5):a}if(c){const b=LZMA.compress(e,1);return a(b).map(a=>a+128).map(a=>PeerUtil.CHAR_MAP[a]).join("")}return btoa(e)})();return`{::${a}|${c?"2":"1"}|${f}::}`}static _unpackToken(a){const b=a.replace(/\s+/g,"").replace(/^{::/,"").replace(/::}$/,"").split("|");if(3===b.length){const[a,c,d]=b;if("2"===c){const b=[...d].map(a=>PeerUtil.CHAR_MAP.indexOf(a)-128);b.slice(0,3).equals([93,0,0])||b.unshift(...PeerUtil.LZMA_HEADER);const c=LZMA.decompress(b),e=c.split("\n").map(a=>a.replace(/^(.)/,"$1=")).join("\n");return{name:a,sdp:e}}if("1"===c){const b=atob(d).split("\n").map(a=>a.replace(/^(.)/,"$1=")).join("\n");return{name:a,sdp:b}}throw new Error(`Unknown compression type "${c}"`)}else return null}static _getTokensFromText(a){const b={};return a=a.replace(/\s+/g,""),a.startsWith("::")&&(a=`{${a}`),a.endsWith("::")&&(a=`${a}}`),a.replace(/{::([^:])+::}/gi,(...a)=>{const c=PeerUtil._unpackToken(a[0]);c&&(b[c.name]={sdp:c.sdp,token:a[0]})}),b}static containsAnyTokens(a){return!!Object.keys(PeerUtil._getTokensFromText(a)).length}static async pConnectClientsToServers(a,b){const c=PeerUtil._getTokensFromText(b),d=[];return await Promise.all(Object.entries(c).map(async([b,c])=>{const e=a.find(a=>a.name===b);e&&(await e.server.pAcceptAnswer(c.sdp),e._tempTokenToDisplay=c.token,d.push(e))})),d}static async pInitialiseClient(a,b,c,d){d=d||{};const e=new PeerClient,f=PeerUtil._unpackToken(a);if(f){const{name:a,sdp:g}=f,h=await e.pReceiveOfferAndGetAnswer(g,b,c);return{name:a,textifiedSdp:PeerUtil._packToken(a,h,!!d.shortTokens),client:e}}return null}static isValidToken(a){return!!(a&&"string"==typeof a&&a.trim())&&!!/{::[^:]+::}/.exec(a)}}PeerUtil.LZMA_HEADER=[93,0,0,1,0],PeerUtil.CHAR_MAP="\u10D0\u10D1\u10D2?\u10D4\u10D5\u10D6_\u10D8\u10D9\u20AC\u10DB\u10DC\u10DD\u10DE\u10DF\u10E0\u10E1\u10E2\u10E3\u10E4\u10E5\u10E6\u10E7\u10E8\u10E9\u10EA\u10EB\u10EC\u10ED\u10EE#\u10F0\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042C\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044C\u044E\u044F.,=>'\"!\xA3$%^&()[]-+;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\u0391\u03B1\u0392\u03B2\u0393\u03B3\u0394\u03B4\u0395\u03B5\u0396\u03B6\u0397\u03B7\u0398\u03B8\u0399\u03B9\u039A\u03BA\u039B\u03BB\u039C\u03BC\u039D\u03BD\u039E\u03BE\u039F\u03BF\u03A0\u03C0\u03A1\u03C1\u03A3\u03C3\u03C2\u03A4\u03C4\u03A5\u03C5\u03A6\u03C6\u03A7\u03C7\u03A8\u03C8\u03A9\u03C9";