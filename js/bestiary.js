"use strict";const JSON_DIR="data/bestiary/",FLUFF_INDEX="fluff-index.json",JSON_LIST_NAME="monster",ECGEN_BASE_PLAYERS=4,renderer=Renderer.get();window.PROF_MODE_BONUS="bonus",window.PROF_MODE_DICE="dice",window.PROF_DICE_MODE=PROF_MODE_BONUS;const _MISC_FILTER_SPELLCASTER="Spellcaster, ";function ascSortMiscFilter(c,d){return c=c.item,d=d.item,c.includes(_MISC_FILTER_SPELLCASTER)&&d.includes(_MISC_FILTER_SPELLCASTER)?(c=Parser.attFullToAbv(c.replace(_MISC_FILTER_SPELLCASTER,"")),d=Parser.attFullToAbv(d.replace(_MISC_FILTER_SPELLCASTER,"")),SortUtil.ascSortAtts(c,d)):SortUtil.ascSort(c,d)}function getAllImmRest(a,b){function c(a){"string"==typeof a?d.push(a):a[b]&&a[b].forEach(a=>c(a))}const d=[];return a.forEach(a=>{c(a)}),d}const meta={},languages={};function addLegendaryGroups(a){a&&a.length&&a.forEach(a=>{meta[a.source]=meta[a.source]||{},meta[a.source][a.name]=a})}let ixFluff={};async function pLoadFluffIndex(){ixFluff=await DataUtil.loadJSON(JSON_DIR+FLUFF_INDEX)}function handleBrew(a){return addLegendaryGroups(a.legendaryGroup),addMonsters(a.monster),Promise.resolve()}function pPostLoad(){return new Promise(a=>{BrewUtil.pAddBrewData().then(handleBrew).then(()=>BrewUtil.bind({list})).then(()=>BrewUtil.pAddLocalBrewData()).catch(BrewUtil.pPurgeBrew).then(async()=>{BrewUtil.makeBrewButton("manage-brew"),BrewUtil.bind({filterBox,sourceFilter}),await ListUtil.pLoadState(),a()})})}let filterBox,encounterBuilder;window.onload=async function(){filterBox=await pInitFilterBox({filters:[sourceFilter,crFilter,typeFilter,tagFilter,environmentFilter,defenceFilter,conditionImmuneFilter,traitFilter,actionReactionFilter,miscFilter,spellcastingTypeFilter,sizeFilter,speedFilter,speedTypeFilter,alignmentFilter,saveFilter,skillFilter,senseFilter,languageFilter,damageTypeFilter,acFilter,averageHpFilter,abilityScoreFilter]}),encounterBuilder=new EncounterBuilder,SortUtil.initHandleFilterButtonClicks(),encounterBuilder.initUi(),await Promise.all([ExcludeUtil.pInitialise(),RenderBestiary.pPopulateMetaAndLanguages(meta,languages),pLoadFluffIndex()]),Object.keys(languages).sort((c,a)=>SortUtil.ascSortLower(languages[c],languages[a])).forEach(a=>languageFilter.addItem(a)),await pMultisourceLoad(JSON_DIR,JSON_LIST_NAME,pPageInit,addMonsters,pPostLoad),null==Hist.lastLoadedId&&Hist._freshLoad(),ExcludeUtil.checkShowAllExcluded(monsters,$(`#pagecontent`)),handleFilterChange(),encounterBuilder.initState()};let list,printBookView;const sourceFilter=getSourceFilter(),crFilter=new RangeFilter({header:"Challenge Rating",isLabelled:!0,labelSortFn:SortUtil.ascSortCr,labels:[...Parser.CRS]}),sizeFilter=new Filter({header:"Size",items:[SZ_TINY,SZ_SMALL,SZ_MEDIUM,SZ_LARGE,SZ_HUGE,SZ_GARGANTUAN,SZ_VARIES],displayFn:Parser.sizeAbvToFull,itemSortFn:null}),speedFilter=new RangeFilter({header:"Speed",min:30,max:30}),speedTypeFilter=new Filter({header:"Speed Type",items:["walk","burrow","climb","fly","hover","swim"],displayFn:StrUtil.uppercaseFirst}),strengthFilter=new RangeFilter({header:"Strength",min:1,max:30}),dexterityFilter=new RangeFilter({header:"Dexterity",min:1,max:30}),constitutionFilter=new RangeFilter({header:"Constitution",min:1,max:30}),intelligenceFilter=new RangeFilter({header:"Intelligence",min:1,max:30}),wisdomFilter=new RangeFilter({header:"Wisdom",min:1,max:30}),charismaFilter=new RangeFilter({header:"Charisma",min:1,max:30}),abilityScoreFilter=new MultiFilter({header:"Ability Scores",mode:"and",filters:[strengthFilter,dexterityFilter,constitutionFilter,intelligenceFilter,wisdomFilter,charismaFilter]}),acFilter=new RangeFilter({header:"Armor Class"}),averageHpFilter=new RangeFilter({header:"Average Hit Points"}),typeFilter=new Filter({header:"Type",items:Parser.MON_TYPES,displayFn:StrUtil.toTitleCase,itemSortFn:SortUtil.ascSortLower}),tagFilter=new Filter({header:"Tag",displayFn:StrUtil.uppercaseFirst}),alignmentFilter=new Filter({header:"Alignment",items:["L","NX","C","G","NY","E","N","U","A"],displayFn:Parser.alignmentAbvToFull,itemSortFn:null}),languageFilter=new Filter({header:"Languages",displayFn:a=>languages[a],umbrellaItems:["X","XX"],umbrellaExcludes:["CS"]}),damageTypeFilter=new Filter({header:"Damage Inflicted",displayFn:a=>Parser.dmgTypeToFull(a).toTitleCase(),items:["A","B","C","F","O","L","N","P","I","Y","R","S","T"]}),senseFilter=new Filter({header:"Senses",displayFn:a=>Parser.monSenseTagToFull(a).toTitleCase(),items:["B","D","SD","T","U"]}),skillFilter=new Filter({header:"Skills",displayFn:a=>a.toTitleCase(),items:["acrobatics","animal handling","arcana","athletics","deception","history","insight","intimidation","investigation","medicine","nature","perception","performance","persuasion","religion","sleight of hand","stealth","survival"]}),saveFilter=new Filter({header:"Saves",displayFn:Parser.attAbvToFull,items:[...Parser.ABIL_ABVS],itemSortFn:null}),environmentFilter=new Filter({header:"Environment",items:["arctic","coastal","desert","forest","grassland","hill","mountain","swamp","underdark","underwater","urban"],displayFn:StrUtil.uppercaseFirst}),DMG_TYPES=["acid","bludgeoning","cold","fire","force","lightning","necrotic","piercing","poison","psychic","radiant","slashing","thunder"],CONDS=["blinded","charmed","deafened","exhaustion","frightened","grappled","incapacitated","invisible","paralyzed","petrified","poisoned","prone","restrained","stunned","unconscious","disease"];function dispVulnFilter(a){return`${StrUtil.uppercaseFirst(a)} Vuln`}const vulnerableFilter=new Filter({header:"Vulnerabilities",items:DMG_TYPES,displayFn:dispVulnFilter});function dispResFilter(a){return`${StrUtil.uppercaseFirst(a)} Res`}const resistFilter=new Filter({header:"Resistance",items:DMG_TYPES,displayFn:dispResFilter});function dispImmFilter(a){return`${StrUtil.uppercaseFirst(a)} Imm`}const immuneFilter=new Filter({header:"Immunity",items:DMG_TYPES,displayFn:dispImmFilter}),defenceFilter=new MultiFilter({header:"Damage",mode:"and",filters:[vulnerableFilter,resistFilter,immuneFilter]}),conditionImmuneFilter=new Filter({header:"Condition Immunity",items:CONDS,displayFn:StrUtil.uppercaseFirst}),traitFilter=new Filter({header:"Traits",items:["Aggressive","Ambusher","Amorphous","Amphibious","Antimagic Susceptibility","Brute","Charge","Damage Absorption","Death Burst","Devil's Sight","False Appearance","Fey Ancestry","Flyby","Hold Breath","Illumination","Immutable Form","Incorporeal Movement","Keen Senses","Legendary Resistances","Light Sensitivity","Magic Resistance","Magic Weapons","Pack Tactics","Pounce","Rampage","Reckless","Regeneration","Rejuvenation","Shapechanger","Siege Monster","Sneak Attack","Spider Climb","Sunlight Sensitivity","Turn Immunity","Turn Resistance","Undead Fortitude","Water Breathing","Web Sense","Web Walker"]}),actionReactionFilter=new Filter({header:"Actions & Reactions",items:["Frightful Presence","Multiattack","Parry","Swallow","Teleport","Tentacles"]}),miscFilter=new Filter({header:"Miscellaneous",items:["Familiar",...Object.keys(Parser.MON_MISC_TAG_TO_FULL),"Lair Actions","Legendary","Named NPC","Spellcaster",...Object.values(Parser.ATB_ABV_TO_FULL).map(a=>`${_MISC_FILTER_SPELLCASTER}${a}`),"Regional Effects","Reactions","Swarm","Has Variants","Modified Copy","Has Alternate Token"],displayFn:a=>Parser.monMiscTagToFull(a).uppercaseFirst(),deselFn:a=>"Named NPC"===a,itemSortFn:ascSortMiscFilter}),spellcastingTypeFilter=new Filter({header:"Spellcasting Type",items:["F","I","P","S","CB","CC","CD","CP","CR","CS","CL","CW"],displayFn:Parser.monSpellcastingTagToFull});function pPageInit(a){Object.keys(a).map(a=>new FilterItem({item:a,changeFn:loadSource(JSON_LIST_NAME,addMonsters)})).forEach(a=>sourceFilter.addItem(a)),list=ListUtil.search({valueNames:["name","source","type","cr","group","alias","uniqueid"],listClass:"monsters",sortFunction:sortMonsters});const b=$(`.lst__wrp-search-visible`);list.on("updated",()=>{b.html(`${list.visibleItems.length}/${list.items.length}`)}),$(filterBox).on(FilterBox.EVNT_VALCHANGE,handleFilterChange),$("#filtertools").find("button.sort").click(function(){const a=$(this);let b="desc"===a.data("sortby")?"asc":"desc";a.data("sortby",b),a.find("span").addClass("desc"===a.data("sortby")?"caret":"caret caret--reverse"),list.sort(a.data("sort"),{order:a.data("sortby"),sortFunction:sortMonsters})});const c=ListUtil.initSublist({valueNames:["name","source","type","cr","count","id","uid"],listClass:"submonsters",sortFunction:sortMonsters,onUpdate:onSublistChange,uidHandler:(a,b)=>ScaleCreature.scale(a,+b.split("_").last()),uidUnpacker:getUnpackedUid}),d={shiftCount:5};ListUtil.bindAddButton(function(){return(a,b)=>{a=b||a,lastRendered.isScaled?a.shiftKey?ListUtil.pDoSublistAdd(Hist.lastLoadedId,!0,5,getScaledData()):ListUtil.pDoSublistAdd(Hist.lastLoadedId,!0,1,getScaledData()):ListUtil.genericAddButtonHandler(a,d)}},d),ListUtil.bindSubtractButton(function(){return(a,b)=>{a=b||a,lastRendered.isScaled?a.shiftKey?ListUtil.pDoSublistSubtract(Hist.lastLoadedId,5,getScaledData()):ListUtil.pDoSublistSubtract(Hist.lastLoadedId,1,getScaledData()):ListUtil.genericSubtractButtonHandler(a,d)}},d),ListUtil.initGenericAddable(),printBookView=new BookModeView("bookview",$(`#btn-printbook`),"If you wish to view multiple creatures, please first make a list",a=>new Promise(b=>{const c=ListUtil.genericPinKeyMapper();Promise.all(c).then(c=>{c.sort((c,a)=>SortUtil.ascSort(c._displayName||c.name,a._displayName||a.name));let d=0;const e=[],f=a=>{if(e.push(`<table class="printbook-bestiary-entry"><tbody>`),e.push(Renderer.monster.getCompactRenderedString(a,renderer)),a.legendaryGroup){const b=(meta[a.legendaryGroup.source]||{})[a.legendaryGroup.name];b&&(e.push(Renderer.monster.getCompactRenderedStringSection(b,renderer,"Lair Actions","lairActions",0)),e.push(Renderer.monster.getCompactRenderedStringSection(b,renderer,"Regional Effects","regionalEffects",0)))}e.push(`</tbody></table>`)};e.push(`<tr class="printbook-bestiary"><td>`),c.forEach(a=>f(a)),c.length||null==Hist.lastLoadedId||f(monsters[Hist.lastLoadedId]),e.push(`</td></tr>`),d+=c.length,a.append(e.join("")),b(d)})}),!0);const e=$("button#profbonusdice");return e.click(function(){window.PROF_DICE_MODE===PROF_MODE_DICE?(window.PROF_DICE_MODE=PROF_MODE_BONUS,this.innerHTML="Use Proficiency Dice",$("#pagecontent").find(`span.render-roller, span.dc-roller`).each(function(){const a=$(this);a.attr("mode",""),a.html(a.attr("data-roll-prof-bonus"))})):(window.PROF_DICE_MODE=PROF_MODE_DICE,this.innerHTML="Use Proficiency Bonus",$("#pagecontent").find(`span.render-roller, span.dc-roller`).each(function(){const a=$(this);a.attr("mode","dice"),a.html(a.attr("data-roll-prof-dice"))}))}),Promise.resolve()}class EncounterBuilderUtils{static getSublistedEncounter(){return ListUtil.sublist.items.map(a=>{const b=monsters[+a._values.id];if(b.cr){const c=a._values.uid?+getUnpackedUid(a._values.uid).scaled:null;return{cr:a._values.cr,count:+a._values.count,crScaled:c,uid:a._values.uid,hash:UrlUtil.autoEncodeHash(b)}}}).filter(a=>a&&100!==a.cr).sort((c,a)=>SortUtil.ascSort(a.cr,c.cr))}static calculateListEncounterXp(a){return EncounterBuilderUtils.calculateEncounterXp(EncounterBuilderUtils.getSublistedEncounter(),a)}static getCrCutoff(a){return a=a.filter(a=>100!==getCr(a)).sort((c,a)=>SortUtil.ascSort(getCr(a),getCr(c))),2>=getCr(a[0])?0:getCr(a[0])/2}static calculateEncounterXp(a,b=ECGEN_BASE_PLAYERS){a=a.filter(a=>100!==getCr(a)).sort((c,a)=>SortUtil.ascSort(getCr(a),getCr(c)));let c=0,d=0;if(!a.length)return{baseXp:0,relevantCount:0,adjustedXp:0};const e=EncounterBuilderUtils.getCrCutoff(a);a.forEach(a=>{getCr(a)>=e&&(d+=a.count),c+=(Parser.crToXpNumber(Parser.numberToCr(getCr(a)))||0)*a.count});const f=Parser.numMonstersToXpMult(d,b),g=f*c;return{baseXp:c,relevantCount:d,adjustedXp:g,meta:{crCutoff:e,playerCount:b,playerAdjustedXpMult:f}}}}let _$totalCr;function onSublistChange(){_$totalCr=_$totalCr||$(`#totalcr`);const a=EncounterBuilderUtils.calculateListEncounterXp(encounterBuilder.lastPlayerCount);_$totalCr.html(`${a.baseXp.toLocaleString()} XP (<span class="help" title="Adjusted Encounter XP">Enc</span>: ${a.adjustedXp.toLocaleString()} XP)`),encounterBuilder.isActive()?encounterBuilder.updateDifficulty():encounterBuilder.doSaveState()}function handleFilterChange(){if(Hist.initialLoad)return;const a=filterBox.getValues();list.filter(function(b){const c=monsters[$(b.elm).attr(FLTR_ID)];return filterBox.toDisplay(a,c._fSources,c._pCr,c._pTypes.type,c._pTypes.tags,c.environment,[c._fVuln,c._fRes,c._fImm],c._fCondImm,c.traitTags,c.actionTags,c._fMisc,c.spellcastingTags,c.size,c._fSpeed,c._fSpeedType,c._fAlign,c._fSave,c._fSkill,c.senseTags,c.languageTags,c.damageTags,c._fAc,c._fHp,[c.str,c.dex,c.con,c.int,c.wis,c.cha])}),onFilterChangeMulti(monsters),encounterBuilder.resetCache()}let monsters=[],mI=0;const lastRendered={mon:null,isScaled:!1};function getScaledData(){const a=lastRendered.mon;return{scaled:a._isScaledCr,uid:getUid(a.name,a.source,a._isScaledCr)}}function getUid(a,b,c){return`${a}_${b}_${c}`.toLowerCase()}function handleBestiaryLiClick(a,b,c){if(encounterBuilder.isActive()){const d=monsters[c],e={clientX:a.clientX,clientY:a.clientY,shiftKey:!0};Renderer.hover.mouseOver(e,b,UrlUtil.PG_BESTIARY,d.source,UrlUtil.autoEncodeHash(d))}else ListUtil.toggleSelected(a,b)}function handleBestiaryLiContext(a,b){encounterBuilder.isActive()||ListUtil.openContextMenu(a,b)}function handleBestiaryLinkClick(a){encounterBuilder.isActive()&&a.preventDefault()}const _NEUT_ALIGNS=["NX","NY"],_addedHashes=new Set;function addMonsters(a){if(!a||!a.length)return;monsters=monsters.concat(a);const b=$("ul.monsters");let c="";for(;mI<monsters.length;mI++){const a=monsters[mI],b=UrlUtil.autoEncodeHash(a);if((a.uniqueId||!_addedHashes.has(b))&&(_addedHashes.add(b),!ExcludeUtil.isExcluded(a.name,"monster",a.source))){if(RenderBestiary.initParsed(a),a._fSpeedType=Object.keys(a.speed).filter(b=>a.speed[b]),a._fSpeed=a._fSpeedType.length?a._fSpeedType.map(b=>a.speed[b].number||a.speed[b]).sort((c,a)=>SortUtil.ascSort(a,c))[0]:0,a.speed.canHover&&a._fSpeedType.push("hover"),a._fAc=a.ac.map(a=>a.ac||a),a._fHp=a.hp.average,a.alignment){const b="object"==typeof a.alignment[0]?Array.prototype.concat.apply([],a.alignment.map(b=>b.alignment)):[...a.alignment];!b.includes("N")||b.includes("G")||b.includes("E")?!b.includes("N")||b.includes("L")||b.includes("C")?1===b.length&&b.includes("N")&&Array.prototype.push.apply(b,_NEUT_ALIGNS):b.push("NX"):b.push("NY"),a._fAlign=b}else a._fAlign=null;a._fVuln=a.vulnerable?getAllImmRest(a.vulnerable,"vulnerable"):[],a._fRes=a.resist?getAllImmRest(a.resist,"resist"):[],a._fImm=a.immune?getAllImmRest(a.immune,"immune"):[],a._fCondImm=a.conditionImmune?getAllImmRest(a.conditionImmune,"conditionImmune"):[],a._fSave=a.save?Object.keys(a.save):[],a._fSkill=a.skill?Object.keys(a.skill):[],a._fSources=ListUtil.getCompleteFilterSources(a),c+=`<li class="row" ${FLTR_ID}="${mI}" onclick="handleBestiaryLiClick(event, this, ${mI})" oncontextmenu="handleBestiaryLiContext(event, this)">
				<a id=${mI} href="#${b}" title="${a.name}" onclick="handleBestiaryLinkClick(event)">
					${EncounterBuilder.getButtons(mI)}
					<span class="ecgen__name name col-4-2 pl-0">${a.name}</span>
					<span class="type col-4-1">${a._pTypes.asText.uppercaseFirst()}</span>
					<span class="col-1-7 text-center cr">${a._pCr||"\u2014"}</span>
					<span title="${Parser.sourceJsonToFull(a.source)}${Renderer.utils.getSourceSubText(a)}" class="col-2 source text-center ${Parser.sourceJsonToColor(a.source)} pr-0" ${BrewUtil.sourceJsonToStyle(a.source)}>${Parser.sourceJsonToAbv(a.source)}</span>
					
					${a.group?`<span class="group hidden">${a.group}</span>`:""}
					<span class="alias hidden">${(a.alias||[]).map(a=>`"${a}"`).join(",")}</span>
					<span class="uniqueid hidden">${a.uniqueId?a.uniqueId:mI}</span>
				</a>
			</li>`,sourceFilter.addItem(a._fSources),null!=a._pCr&&crFilter.addItem(a._pCr),strengthFilter.addItem(a.str),dexterityFilter.addItem(a.dex),constitutionFilter.addItem(a.con),intelligenceFilter.addItem(a.int),wisdomFilter.addItem(a.wis),charismaFilter.addItem(a.cha),speedFilter.addItem(a._fSpeed),a.ac.forEach(a=>acFilter.addItem(a.ac||a)),a.hp.average&&averageHpFilter.addItem(a.hp.average),a._pTypes.tags.forEach(a=>tagFilter.addItem(a)),a._fMisc=a.legendary||a.legendaryGroup?["Legendary"]:[],a.familiar&&a._fMisc.push("Familiar"),a.type.swarmSize&&a._fMisc.push("Swarm"),a.spellcasting&&(a._fMisc.push("Spellcaster"),a.spellcasting.forEach(b=>{b.ability&&a._fMisc.push(`${_MISC_FILTER_SPELLCASTER}${Parser.attAbvToFull(b.ability)}`)})),a.isNpc&&a._fMisc.push("Named NPC"),a.legendaryGroup&&(meta[a.legendaryGroup.source]||{})[a.legendaryGroup.name]&&((meta[a.legendaryGroup.source]||{})[a.legendaryGroup.name].lairActions&&a._fMisc.push("Lair Actions"),(meta[a.legendaryGroup.source]||{})[a.legendaryGroup.name].regionalEffects&&a._fMisc.push("Regional Effects")),a.reaction&&a._fMisc.push("Reactions"),a.variant&&a._fMisc.push("Has Variants"),a.miscTags&&a._fMisc.push(...a.miscTags),a._isCopy&&a._fMisc.push("Modified Copy"),a.altArt&&a._fMisc.push("Has Alternate Token"),traitFilter.addItem(a.traitTags),actionReactionFilter.addItem(a.actionTags),environmentFilter.addItem(a.environment)}}const d=ListUtil.getSearchTermAndReset(list);b.append(c),list.reIndex(),d&&list.search(d),list.sort("name"),filterBox.render(),handleFilterChange(),ListUtil.setOptions({itemList:monsters,getSublistRow:pGetSublistItem,primaryLists:[list]}),Renderer.hover.bindPopoutButton(monsters,function(a,b,c){return d=>{d.shiftKey?Renderer.hover.handlePopoutCode(d,a,b,c):null!=lastRendered.mon&&lastRendered.isScaled?Renderer.hover.doPopoutPreloaded(b,lastRendered.mon,d.clientX):null!==Hist.lastLoadedId&&Renderer.hover.doPopout(b,a,Hist.lastLoadedId,d.clientX)}}),UrlUtil.bindLinkExportButton(filterBox),ListUtil.bindDownloadButton(),ListUtil.bindUploadButton(sublistFuncPreload),Renderer.utils.bindPronounceButtons()}function sublistFuncPreload(a,b){a.l&&a.l.items&&a.l.sources&&(a.items=a.l.items,a.sources=a.l.sources);const c=Object.keys(loadedSources).filter(a=>loadedSources[a].loaded),d=a.sources.map(a=>a.toLowerCase()),e=Object.keys(loadedSources).filter(a=>!c.includes(a)).filter(a=>d.includes(a.toLowerCase())),f=e.length;if(f){let a=0;e.forEach(c=>{loadSource(JSON_LIST_NAME,c=>{addMonsters(c),++a===f&&b()})(c,"yes")})}else b()}function pGetSublistItem(a,b,c,d={}){return new Promise(e=>{const f=d.scaled?ScaleCreature.scale(a,d.scaled):Promise.resolve(a);f.then(a=>{RenderBestiary.updateParsed(a);const f=d.scaled?`${HASH_PART_SEP}${MON_HASH_SCALED}${HASH_SUB_KV_SEP}${d.scaled}`:"";RenderBestiary.initParsed(a),e(`
				<li class="row row--bestiary_sublist" ${FLTR_ID}="${b}" oncontextmenu="ListUtil.openSubContextMenu(event, this)">
					<a href="#${UrlUtil.autoEncodeHash(a)}${f}" title="${a._displayName||a.name}" draggable="false" class="ecgen__hidden">
						<span class="name col-5 pl-0">${a._displayName||a.name}</span>
						<span class="type col-3-8">${a._pTypes.asText.uppercaseFirst()}</span>
						<span class="cr col-1-2 text-center">${a._pCr||"\u2014"}</span>
						<span class="count col-2 text-center">${c||1}</span>

						<span class="id hidden">${b}</span>
						<span class="uid hidden">${d.uid||""}</span>
					</a>
					
					<div class="list__item_inner ecgen__visible--flex">
						${EncounterBuilder.getButtons(b,!0)}
						<span class="ecgen__name--sub col-5">${a._displayName||a.name}</span>
						<span class="col-1-4 help--hover ecgen__visible" onmouseover="EncounterBuilder.doStatblockMouseOver(event, this, ${b}, ${a._isScaledCr})">Statblock</span>
						<span class="col-1-2 ecgen__visible help--hover" ${EncounterBuilder.getTokenMouseOver(a)}>Token</span>
						<span class="col-1-2 ecgen__visible help--hover" onmouseover="EncounterBuilder.doImageMouseOver(event, this, ${b})">Image</span>
						${"Unknown"===a._pCr?`<span class="col-1-2 text-center">${a._pCr||"\u2014"}</span>`:`
							<span class="col-1-2 text-center">
								<input value="${a._pCr}" onchange="encounterBuilder.doCrChange(this, ${b}, ${a._isScaledCr})" class="ecgen__cr_input form-control form-control--minimal input-xs">
							</span>
						`}
						<span class="col-2 pr-0 text-center count">${c||1}</span>
					</div>
				</li>
			`)})})}function sortMonsters(c,d,e){function f(){if("count"===e.valueName)return SortUtil.ascSort(+c.values().count,+d.values().count);switch(c=monsters[c.elm.getAttribute(FLTR_ID)],d=monsters[d.elm.getAttribute(FLTR_ID)],e.valueName){case"name":return SortUtil.ascSort(c.name,d.name);case"type":return SortUtil.ascSort(c._pTypes.asText,d._pTypes.asText);case"source":return SortUtil.ascSort(c.source,d.source);case"cr":return SortUtil.ascSortCr(c._pCr,d._pCr);}}return f()||SortUtil.ascSort(c.name,d.name)||SortUtil.ascSort(c.source,d.source)}let profBtn=null;function loadHash(a){const b=monsters[a];renderStatblock(b),loadSubHash([]),ListUtil.updateSelected()}function renderStatblock(a,b){function c(b){return Renderer.utils.pBuildFluffTab(b,d,a,Renderer.monster.getFluff.bind(null,a,meta),`${JSON_DIR}${ixFluff[a.source]}`,()=>ixFluff[a.source])}lastRendered.mon=a,lastRendered.isScaled=b,renderer.setFirstSection(!0);const d=$("#pagecontent").empty(),e=$(`#wrp-profbonusdice`);null!==profBtn&&(e.append(profBtn),profBtn=null);const f=Renderer.utils.tabButton("Statblock",()=>{e.append(profBtn),$(`#float-token`).show()},function(){function c(a){return a.replace(/([^0-9d])/gi," $1 ").replace(/\s+/g," ")}const e=null==a.cr?null:$(`
			<button id="btn-scale-cr" title="Scale Creature By CR (Highly Experimental)" class="mon__btn-scale-cr btn btn-xs btn-default">
				<span class="glyphicon glyphicon-signal"/>
			</button>`).off("click").click(a=>{a.stopPropagation();const b=monsters[Hist.lastLoadedId],c=lastRendered.mon?lastRendered.mon.cr.cr||lastRendered.mon.cr:b.cr.cr||b.cr;Renderer.monster.getCrScaleTarget(e,c,a=>{a===Parser.crToNumber(b.cr)?renderStatblock(b):Hist.setSubhash(MON_HASH_SCALED,a)})}).toggle(100!==Parser.crToNumber(a.cr.cr||a.cr)),f=null==a.cr?null:$(`
			<button id="btn-reset-cr" title="Reset CR Scaling" class="mon__btn-reset-cr btn btn-xs btn-default">
				<span class="glyphicon glyphicon-refresh"></span>
			</button>`).click(()=>Hist.setSubhash(MON_HASH_SCALED,null)).toggle(b);d.append(RenderBestiary.$getRenderedCreature(a,meta,{$btnScaleCr:e,$btnResetScaleCr:f})),(()=>{function b(a){a&&$(a).parent().remove(),$(`#pagecontent th.name`).css("padding-right","0.3em"),$(`.mon__wrp-size-type-align`).css("max-width","none"),$(`.mon__wrp-avoid-token`).css("max-width","none")}const c=[];$(`#wrp-pagecontent`).off("scroll").on("scroll",function(){c.forEach(a=>{a.toggle(32>this.scrollTop).css({opacity:(32-this.scrollTop)/32,top:-this.scrollTop})})});const d=$(`#float-token`).empty();if(a.tokenUrl||!a.uniqueId){const e=Renderer.monster.getTokenUrl(a),f=$(`<img src="${e}" class="mon__token" alt="${a.name}">`).on("error",()=>b(f));c.push(f);const g=$$`<a href="${e}" class="mon__wrp-token" target="_blank" rel="noopener">${f}</a>`.appendTo(d),h=[];if(a.altArt&&h.push(...MiscUtil.copy(a.altArt)),a.variant){const b=a.variant.filter(a=>a.token).map(a=>a.token);b.length&&h.push(...MiscUtil.copy(b).map(a=>({...a,displayName:`Variant; ${a.name}`})))}if(h.length){h.unshift({$ele:g});h.forEach(a=>{if(!a.$ele){const b=Renderer.monster.getTokenUrl({name:a.name,source:a.source}),e=$(`<img src="${b}" class="mon__token" alt="${a.displayName||a.name}">`).on("error",()=>{e.attr("src",`data:image/svg+xml,${encodeURIComponent(`
											<svg xmlns="http://www.w3.org/2000/svg" width="400" height="400">
												<circle cx="200" cy="200" r="175" fill="#b00"/>
												<rect x="190" y="40" height="320" width="20" fill="#ddd" transform="rotate(45 200 200)"/>
												<rect x="190" y="40" height="320" width="20" fill="#ddd" transform="rotate(135 200 200)"/>
											</svg>`)}`)});c.push(e),a.$ele=$$`<a href="${b}" class="mon__wrp-token" target="_blank" rel="noopener">${e}</a>`.hide().css("max-width","100%").appendTo(d)}});let a=0;const b=(b,c)=>{if(b.stopPropagation(),b.preventDefault(),0===a&&!~c)return;if(a===h.length-1&&~c)return;a+=c,~c?(i.show(),f.show(),a===h.length-1&&j.hide()):(0===a&&(i.hide(),f.hide()),j.show()),h.filter(a=>a.$ele).forEach(a=>a.$ele.hide());const d=h[a];d.$ele.show(),setTimeout(()=>d.$ele.css("max-width",""),10),d.name&&d.source?e.html(`<div>${d.displayName||d.name}; <span title="${Parser.sourceJsonToFull(d.source)}">${Parser.sourceJsonToAbv(d.source)}${0<d.page?` p${d.page}`:""}</span></div>`):e.html(""),f.detach().appendTo(d.$ele),i.detach().appendTo(d.$ele),j.detach().appendTo(d.$ele)},e=$(`<div class="mon__token-footer"/>`),f=$$`<div class="mon__wrp-token-footer">${e}</div>`.hide().appendTo(g),i=$$`<div class="mon__btn-token-cycle mon__btn-token-cycle--left"><span class="glyphicon glyphicon-chevron-left"/></div>`.click(a=>b(a,-1)).appendTo(g).hide(),j=$$`<div class="mon__btn-token-cycle mon__btn-token-cycle--right"><span class="glyphicon glyphicon-chevron-right"/></div>`.click(a=>b(a,1)).appendTo(g)}}else b()})();const g=PROF_DICE_MODE===PROF_MODE_DICE;d.find(".render-roller").filter(function(){return $(this).text().match(/^([-+])?\d+$/)}).each(function(){const b=+$(this).text(),d=Parser.crToPb(a.cr);let e,f,h=1,i=d;if($(this).parent().attr("data-mon-save")){const c=$(this).attr("title");f=c.split(" ")[0].trim().toLowerCase().substring(0,3),e=Parser.getAbilityModNumber(a[f]),i=b-e,h=i===2*d?2:1}else if($(this).parent().attr("data-mon-skill")){const c=$(this).attr("title");f=Parser.skillToAbilityAbv(c.toLowerCase().trim()),e=Parser.getAbilityModNumber(a[f]),i=b-e,h=i===2*d?2:1}const j=b-i;try{if(0<d){const a=c(`${h}d${i*(3-h)}${0<=j?"+":""}${j}`);$(this).attr("data-roll-prof-bonus",$(this).text()),$(this).attr("data-roll-prof-dice",a);const b=$(this).attr("onclick"),d=`
							(function(it) {
								if (PROF_DICE_MODE === PROF_MODE_DICE) {
									Renderer.dice.rollerClick(event, it, '{"type":"dice","rollable":true,"toRoll":"1d20 + ${a}"}'${$(this).prop("title")?`, '${$(this).prop("title")}'`:""})
								} else {
									${b.replace(/this/g,"it")}
								}
							})(this)`;$(this).attr("onclick",d),g&&$(this).html(a)}}catch(a){setTimeout(()=>{throw new Error(`Invalid save or skill roller! Bonus was ${0<=b?"+":""}${b}, but creature's PB was +${d} and relevant ability score (${f}) was ${0<=e?"+":""}${e} (should have been ${0<=d+e?"+":""}${d+e} total)`)},0)}}),d.find("p").each(function(){$(this).find(`.rd__dc`).each((b,d)=>{const e=$(d),f=+e.html(),h=Parser.crToPb(a.cr);if(0<h){const a=f-h,b=c(`1d${2*h}${0<=a?"+":""}${a}`);e.addClass("dc-roller").attr("mode",g?"dice":"").mousedown(a=>window.PROF_DICE_MODE===window.PROF_MODE_DICE&&a.preventDefault()).attr("onclick",`dcRollerClick(event, this, '${b}')`).attr("data-roll-prof-bonus",`${f}`).attr("data-roll-prof-dice",b).html(g?b:f)}})}),$(`#wrp-pagecontent`).scroll()}),g=Renderer.utils.tabButton("Info",()=>{profBtn=profBtn||e.children().detach(),$(`#float-token`).hide()},c),h=Renderer.utils.tabButton("Images",()=>{profBtn=profBtn||e.children().detach(),$(`#float-token`).hide()},()=>c(!0));Renderer.utils.bindTabButtons(f,g,h)}function handleUnknownHash(a){const b=Object.keys(loadedSources).find(b=>b.toLowerCase()===decodeURIComponent(a.split(HASH_LIST_SEP)[1]).toLowerCase());b&&loadSource(JSON_LIST_NAME,a=>{addMonsters(a),Hist.hashChange()})(b,"yes")}function dcRollerClick(a,b,c){if(window.PROF_DICE_MODE!==PROF_MODE_BONUS){Renderer.dice.rollerClick(a,b,JSON.stringify({type:"dice",rollable:!0,toRoll:c}))}}function getUnpackedUid(a){return{scaled:+a.split("_").last(),uid:a}}function getCr(a){return null==a.crScaled?null==a.cr?null:"string"==typeof a.cr?a.cr.includes("/")?Parser.crToNumber(a.cr):+a.cr:a.cr:a.crScaled}function loadSubHash(a){a=filterBox.setFromSubHashes(a),ListUtil.setFromSubHashes(a,sublistFuncPreload),printBookView.handleSub(a);const b=a.find(a=>a.startsWith(MON_HASH_SCALED));if(b){const a=+UrlUtil.unpackSubHash(b)[MON_HASH_SCALED][0],c=Parser.numberToCr(a),d=monsters[Hist.lastLoadedId];Parser.isValidCr(c)&&a!==Parser.crToNumber(lastRendered.mon.cr)&&ScaleCreature.scale(d,a).then(a=>renderStatblock(a,!0))}encounterBuilder.handleSubhash(a)}