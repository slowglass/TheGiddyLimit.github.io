"use strict";const ASI_SORT_POS={Strength:0,Dexterity:1,Constitution:2,Intelligence:3,Wisdom:4,Charisma:5};function getAbilityObjs(a){function b(a,b){return{asi:a,amount:b,_toIdString:()=>`${a}${b}`}}const c=new CollectionUtil.ObjectSet;return(a||[]).forEach(a=>{if(a.choose){const d=a.choose;if(d.weighted)d.weighted.from.forEach(a=>{d.weighted.weights.forEach(d=>{c.add(b(a,d))})});else{const a=d.amount||1;d.from.forEach(d=>c.add(b(d,a)))}}Object.keys(a).filter(a=>"choose"!==a).forEach(d=>c.add(b(d,a[d])))}),Array.from(c.values())}function mapAbilityObjToFull(a){return`${Parser.attAbvToFull(a.asi)} ${0>a.amount?"":"+"}${a.amount}`}function getSpeedRating(a){return 30<a?"Walk (Fast)":30>a?"Walk (Slow)":"Walk"}function filterAscSortSize(c,d){function e(a){return"M"===a?0:"S"===a?-1:"V"===a?1:void 0}return c=c.item,d=d.item,SortUtil.ascSort(e(c),e(d))}function filterAscSortAsi(c,d){if(c=c.item,d=d.item,"Player Choice"===c)return-1;if(c.startsWith("Any")&&d.startsWith("Any")){const a=c.replace("Any","").replace("Increase","").trim(),b=d.replace("Any","").replace("Increase","").trim();return ASI_SORT_POS[a]-ASI_SORT_POS[b]}if(c.startsWith("Any"))return-1;if(d.startsWith("Any"))return 1;else{const[a,b]=c.split(" "),[e,f]=d.split(" ");return ASI_SORT_POS[a]-ASI_SORT_POS[e]||+f-+b}}class RacesPage extends ListPage{constructor(){const a=getSourceFilter(),b=new Filter({header:"Size",displayFn:Parser.sizeAbvToFull,itemSortFn:filterAscSortSize}),c=new Filter({header:"Ability Bonus (Including Subrace)",items:["Player Choice","Any Strength Increase","Any Dexterity Increase","Any Constitution Increase","Any Intelligence Increase","Any Wisdom Increase","Any Charisma Increase","Strength +2","Strength +1","Dexterity +2","Dexterity +1","Constitution +2","Constitution +1","Intelligence +2","Intelligence +1","Wisdom +2","Wisdom +1","Charisma +2","Charisma +1"],itemSortFn:filterAscSortAsi}),d=new Filter({header:"Base Race"}),e=new Filter({header:"Speed",items:["Climb","Fly","Swim","Walk (Fast)","Walk","Walk (Slow)"]}),f=new Filter({header:"Traits",items:["Amphibious","Armor Proficiency","Damage Resistance","Darkvision","Superior Darkvision","Dragonmark","Improved Resting","Monstrous Race","Natural Armor","NPC Race","Powerful Build","Skill Proficiency","Spellcasting","Tool Proficiency","Unarmed Strike","Uncommon Race","Weapon Proficiency"],deselFn:a=>"NPC Race"===a}),g=new Filter({header:"Languages",items:["Abyssal","Aquan","Auran","Celestial","Choose","Common","Draconic","Dwarvish","Elvish","Giant","Gnomish","Goblin","Halfling","Infernal","Orc","Other","Primordial","Sylvan","Terran","Undercommon"],umbrellaItems:["Choose"]});super({dataSource:async()=>{const a=await DataUtil.loadJSON("data/races.json"),b=Renderer.race.mergeSubraces(a.race);return{race:b}},dataSourceFluff:"data/fluff-races.json",filters:[a,c,b,e,f,g,d],filterSource:a,listValueNames:["name","ability","size","source","clean-name","uniqueid"],listClass:"races",sublistValueNames:["name","ability","size","id"],sublistClass:"subraces",dataProps:["race"],hasAudio:!0}),this._sourceFilter=a,this._sizeFilter=b,this._asiFilter=c,this._baseRaceFilter=d}getListItem(a,b){const c=a.ability?Renderer.getAbilityData(a.ability):{asTextShort:"None"};if(a.ability){const b=getAbilityObjs(a.ability);a._fAbility=b.map(b=>mapAbilityObjToFull(b));const c={};b.filter(a=>0<a.amount).forEach(a=>c[a.asi]=!0),Object.keys(c).forEach(b=>a._fAbility.push(`Any ${Parser.attAbvToFull(b)} Increase`)),a.ability.choose&&a._fAbility.push("Player Choice")}else a._fAbility=[];a._fSpeed=a.speed.walk?[a.speed.climb?"Climb":null,a.speed.fly?"Fly":null,a.speed.swim?"Swim":null,getSpeedRating(a.speed.walk)].filter(a=>a):getSpeedRating(a.speed),a._fMisc=[120===a.darkvision?"Superior Darkvision":a.darkvision?"Darkvision":null,a.hasSpellcasting?"Spellcasting":null].filter(a=>a).concat(a.traitTags||[]),a._fSources=ListUtil.getCompleteFilterSources(a),a._slAbility=c.asTextShort;const d=/^(.*?) \((.*?)\)$/.exec(a.name);return this._sourceFilter.addItem(a._fSources),this._sizeFilter.addItem(a.size),this._asiFilter.addItem(a._fAbility),this._baseRaceFilter.addItem(a._baseName),`
		<li class="row" ${FLTR_ID}="${b}" onclick="ListUtil.toggleSelected(event, this)" oncontextmenu="ListUtil.openContextMenu(event, this)">
			<a id="${b}" href="#${UrlUtil.autoEncodeHash(a)}" title="${a.name}">
				<span class="name col-4 pl-0">${a.name}</span>
				<span class="ability col-4">${c.asTextShort}</span>
				<span class="size col-2">${Parser.sizeAbvToFull(a.size)}</span>
				<span class="source col-2 text-center ${Parser.sourceJsonToColor(a.source)} pr-0" title="${Parser.sourceJsonToFull(a.source)}" ${BrewUtil.sourceJsonToStyle(a.source)}>${Parser.sourceJsonToAbv(a.source)}</span>
				${d?`<span class="clean-name hidden">${d[2]} ${d[1]}</span>`:""}
				
				<span class="uniqueid hidden">${a.uniqueId?a.uniqueId:b}</span>
			</a>
		</li>`}handleFilterChange(){const a=this._filterBox.getValues();this._list.filter(b=>{const c=this._dataList[$(b.elm).attr(FLTR_ID)];return this._filterBox.toDisplay(a,c._fSources,c._fAbility,c.size,c._fSpeed,c._fMisc,c.languageTags,c._baseName)}),FilterBox.selectFirstVisible(this._dataList)}getSublistItem(a,b){return`
		<li class="row" ${FLTR_ID}="${b}" oncontextmenu="ListUtil.openSubContextMenu(event, this)">
			<a href="#${UrlUtil.autoEncodeHash(a)}" title="${a.name}">
				<span class="name col-5 pl-0">${a.name}</span>
				<span class="ability col-5">${a._slAbility}</span>
				<span class="size col-2 pr-0">${Parser.sizeAbvToFull(a.size)}</span>
				<span class="id hidden">${b}</span>
			</a>
		</li>
	`}doLoadHash(a){function b(a){return Renderer.utils.pBuildFluffTab(a,e,f,c,`data/fluff-races.json`,()=>!0)}function c(a){const b=Renderer.utils.getPredefinedFluff(f,"raceFluff");if(b)return b;const c=f._baseName&&f.name.toLowerCase()===f._baseName.toLowerCase()?"":a.race.find(a=>a.name.toLowerCase()===f.name.toLowerCase()&&a.source.toLowerCase()===f.source.toLowerCase()),d=a.race.find(a=>f._baseName&&a.name.toLowerCase()===f._baseName.toLowerCase()&&f._baseSource&&a.source.toLowerCase()===f._baseSource.toLowerCase());if(!c&&!d)return null;const e=b=>a.race.find(a=>b.name.toLowerCase()===a.name.toLowerCase()&&b.source.toLowerCase()===a.source.toLowerCase()),g={type:"section"},h=(a,b)=>{if(a.entries){g.entries=g.entries||[];const c={type:"section",entries:MiscUtil.copy(a.entries)};b&&!a.entries.length&&(c.name=f._baseName),g.entries.push(c)}if(a.images&&!(b&&c&&c._excludeBaseImages)&&(g.images=g.images||[],g.images.push(...MiscUtil.copy(a.images))),a._appendCopy){const c=e(a._appendCopy);if(c.entries){g.entries=g.entries||[];const d={type:"section",entries:MiscUtil.copy(c.entries)};b&&!a.entries.length&&(d.name=f._baseName),g.entries.push(d)}c.images&&(g.images=g.images||[],g.images.push(...MiscUtil.copy(c.images)))}};if(c&&h(c),d&&h(d,!0),c&&c.uncommon||d&&d.uncommon){const b={type:"section",entries:[MiscUtil.copy(a.meta.uncommon)]};g.entries?g.entries.push(b):(g.entries=[HTML_NO_INFO],g.entries.push(...b.entries))}if(c&&c.monstrous||d&&d.monstrous){const b={type:"section",entries:[MiscUtil.copy(a.meta.monstrous)]};g.entries?g.entries.push(b):(g.entries=[HTML_NO_INFO],g.entries.push(...b.entries))}if(g.entries.length&&"section"===g.entries[0].type){const a=g.entries.splice(0,1)[0];g.entries.unshift(...a.entries)}return g}const d=this._renderer;d.setFirstSection(!0);const e=$("#pagecontent").empty(),f=this._dataList[a],g=Renderer.utils.tabButton("Traits",()=>{},function(){e.append(RenderRaces.$getRenderedRace(f))}),h=Renderer.utils.tabButton("Info",()=>{},b),i=Renderer.utils.tabButton("Images",()=>{},b.bind(null,!0));Renderer.utils.bindTabButtons(g,h,i),ListUtil.updateSelected()}doLoadSubHash(a){a=this._filterBox.setFromSubHashes(a),ListUtil.setFromSubHashes(a)}}const racesPage=new RacesPage;window.addEventListener("load",()=>racesPage.pOnLoad());